import torch


def case_118():
    ind_load = torch.tensor(
        [[1], [2], [3], [4], [5], [6], [7], [8], [10], [12], [13], [14], [15], [16], [17], [18],  # 16
         [19], [20], [21], [22], [23], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37],  # 16
         [38], [40], [41], [42], [43], [44], [45], [46], [47], [49], [50], [51], [52], [55], [56], [57],
         [59], [62], [63], [66], [67], [69], [70], [71], [72], [73], [74], [75], [76], [77], [78], [80],
         [81], [82], [83], [84], [85], [87], [89], [91], [92], [93], [94], [95], [96], [97], [98], [100],
         [101], [103], [104], [105], [106], [107], [108], [111], [112], [113], [114], [115], [116], [117]])

    load = torch.tensor(
        [[67], [90], [39], [20], [52], [19], [28], [70], [20], [34], [14], [90], [25], [11], [60], [45],
         [18], [14], [10], [37], [13], [88], [24], [20], [43], [59], [23], [59], [33], [31], [93], [20],
         [20], [37], [96], [18], [16], [53], [28], [34], [20], [104], [17], [18], [136], [147], [12],
         [12], [155], [20], [20], [67], [20], [20], [66], [12], [6], [30], [68], [108], [68], [71], [39], [130],
         [54], [20], [11], [24], [21], [48], [163], [75], [12], [30], [42], [38], [15], [34], [42], [59],
         [45], [38], [54], [43], [50], [82], [8], [107], [6], [8], [22], [184], [20], [33]])  # 94个load

    ind_generator = torch.tensor([[0], [26], [39], [54], [61], [86], [90], [109],
                                  [9], [11], [24], [25], [48], [53], [58], [60], [64], [65], [68], [79], [88], [99],
                                  [102], [110]])  # 24个发电机

    generator = torch.tensor([[50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 1
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 27
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 40
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 55
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 62
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 87
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 91
                              [50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 110

                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 450, 450, 450],  # 10
                              [-50, 0, 50, 100, 150, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 12
                              [-50, 0, 50, 100, 150, 200, 250, 300, 320, 320, 320, 320, 320, 320],  # 25
                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 410, 410, 410, 410],  # 26
                              [-50, 0, 50, 100, 150, 200, 250, 300, 300, 300, 300, 300, 300, 300],  # 49
                              [-50, 0, 50, 100, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],  # 54
                              [-50, 0, 50, 100, 150, 200, 250, 260, 260, 260, 260, 260, 260, 260],  # 59
                              [-50, 0, 50, 100, 150, 200, 250, 260, 260, 260, 260, 260, 260, 260],  # 61
                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 400, 400, 400, 400],  # 65
                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 400, 400, 400, 400],  # 66
                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 550],  # 69
                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 480, 480, 480],  # 80
                              [-50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600],  # 89
                              [-50, 0, 50, 100, 150, 200, 250, 250, 250, 250, 250, 250, 250, 250],  # 100
                              [-50, 0, 50, 100, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],  # 103
                              [-50, 0, 50, 100, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150]])  # 111

    row_num = 118
    col_num = 118
    adjacent = torch.zeros(row_num, col_num)
    edges = [(1, 2), (1, 3), (4, 5), (3, 5), (5, 6), (6, 7), (8, 9), (8, 5), (9, 10), (4, 11), (5, 11), (11, 12),
             (2, 12), (3, 12), (7, 12), (11, 13), (12, 14), (13, 15), (14, 15), (12, 16), (15, 17), (16, 17),
             (17, 18), (18, 19), (19, 20), (15, 19), (20, 21), (21, 22), (22, 23), (23, 24), (23, 25), (26, 25),
             (25, 27), (27, 28), (28, 29), (30, 17), (8, 30), (26, 30), (17, 31), (29, 31), (23, 32), (31, 32),
             (27, 32), (15, 33), (19, 34), (35, 36), (35, 37), (33, 37), (34, 36), (34, 37), (38, 37), (37, 39),
             (37, 40), (30, 38), (39, 40), (40, 41), (40, 42), (41, 42), (43, 44), (34, 43), (44, 45), (45, 46),
             (46, 47), (46, 48), (47, 49), (42, 49), (45, 49), (48, 49), (49, 50), (49, 51), (51, 52), (52, 53),
             (53, 54), (49, 54), (54, 55), (54, 56), (55, 56), (56, 57), (50, 57), (56, 58), (51, 58), (54, 59),
             (56, 59), (55, 59), (59, 60), (59, 61), (60, 61), (60, 62), (61, 62), (63, 59), (63, 64), (64, 61),
             (38, 65), (64, 65), (49, 66), (62, 66), (62, 67), (65, 66), (66, 67), (65, 68), (47, 69), (49, 69),
             (68, 69), (69, 70), (24, 70), (70, 71), (24, 72), (71, 72), (71, 73), (70, 74), (70, 75), (69, 75),
             (74, 75), (76, 77), (69, 77), (75, 77), (77, 78), (78, 79), (77, 80), (79, 80), (68, 81), (81, 80),
             (77, 82), (82, 83), (83, 84), (83, 85), (84, 85), (85, 86), (86, 87), (85, 88), (85, 89), (88, 89),
             (89, 90), (90, 91), (89, 92), (91, 92), (92, 93), (92, 94), (93, 94), (94, 95), (80, 96), (82, 96),
             (94, 96), (80, 97), (80, 98), (80, 99), (92, 100), (94, 100), (95, 96), (96, 97), (98, 100),
             (99, 100), (100, 101), (92, 102), (101, 102), (100, 103), (100, 104), (103, 104), (103, 105),
             (100, 106), (104, 105), (105, 106), (105, 107), (105, 108), (106, 107), (108, 109), (103, 110),
             (109, 110), (110, 111), (110, 112), (17, 113), (32, 113), (32, 114), (27, 115), (114, 115),
             (68, 116), (12, 117), (75, 118), (76, 118)]
    for edge in edges:
        row = edge[0]
        col = edge[1]
        adjacent[row - 1][col - 1] = 1
        adjacent[col - 1][row - 1] = 1

    load_weight = torch.tensor([[0.8658], [0.5201], [0.9875], [0.0144], [0.2486], [0.9566], [0.2761], [0.6212],
                                [0.0423], [0.2420], [0.3839], [0.8831], [0.9852], [0.7456], [0.3313], [0.7377],
                                [0.8822], [0.6861], [0.0374], [0.8936], [0.8182], [0.7400], [0.5770], [0.0235],
                                [0.9244], [0.6016], [0.5161], [0.5338], [0.1549], [0.7649], [0.3173], [0.2625],
                                [0.5938], [0.4976], [0.3380], [0.9531], [0.9086], [0.8615], [0.0452], [0.7047],
                                [0.1282], [0.0522], [0.6371], [0.8035], [0.9113], [0.1970], [0.2820], [0.0735],
                                [0.1300], [0.0058], [0.5182], [0.3788], [0.3575], [0.9919], [0.2863], [0.8013],
                                [0.4404], [0.5866], [0.2124], [0.6453], [0.5592], [0.8687], [0.0437], [0.7520],
                                [0.9177], [0.1052], [0.9005], [0.9214], [0.0034], [0.7359], [0.4143], [0.8753],
                                [0.8744], [0.8991], [0.4174], [0.2428], [0.4271], [0.4533], [0.0439], [0.5281],
                                [0.8744], [0.8991], [0.4174], [0.2428], [0.4271], [0.4533], [0.0439], [0.5281],
                                [0.6603], [0.2999], [0.4195], [0.6214], [0.4195], [0.6214]])

    return ind_load, load, ind_generator, generator, adjacent, load_weight

# def case_8000(self):
#   ind_load = torch.tensor([[1], [3], [5]])
#  load =
# ind_generator =
# generator =
# adjacent =
# load_weight =

# return ind_load, load, ind_generator, generator, adjacent, load_weight
